
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://snobnrnjzudifcowbshc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNub2Jucm5qenVkaWZjb3dic2hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3ODEyNjksImV4cCI6MjA2MjM1NzI2OX0.52YNF4frhpPugjeNBoObJ3xr-FmFIhR1DIBYd8WmCfk";

// Additional configuration for debugging and improved session support
const supabaseOptions = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage
  },
  global: {
    headers: {
      'x-client-info': 'lovable-app'
    }
  },
  // Enable debug mode in development environment
  debug: process.env.NODE_ENV !== 'production',
  // Improved performance settings
  realtime: {
    timeout: 30000, // increase timeout from default 10s
    params: {
      eventsPerSecond: 10
    }
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions);

console.log("Supabase client initialized with URL:", SUPABASE_URL);

// Verify connection with Supabase
async function checkSupabaseConnection() {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) {
      console.error("⚠️ Erro ao conectar com o Supabase:", error);
    } else {
      console.log("✅ Conexão com Supabase estabelecida com sucesso");
    }
  } catch (err) {
    console.error("❌ Falha crítica na conexão com Supabase:", err);
  }
}

// Execute the check when the client is imported
checkSupabaseConnection();

// Add support for manual connection checking
export const testConnection = async () => {
  try {
    const start = Date.now();
    const { error } = await supabase.from('profiles').select('count').limit(1);
    const end = Date.now();
    
    if (error) {
      return { status: 'error', message: error.message, time: null };
    }
    
    return { status: 'connected', message: 'Conexão estabelecida', time: end - start };
  } catch (err: any) {
    return { status: 'error', message: err.message || 'Erro desconhecido', time: null };
  }
};
